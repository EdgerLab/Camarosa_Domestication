#!/usr/bin/env python3

__author__ = "Scott Teresi"

import pandas as pd
import numpy as np

import os
import argparse
import logging
import coloredlogs

from src.orthologs.syntelogs import read_cleaned_syntelogs
from src.orthologs.homologs import read_cleaned_homologs
from transposon.import_filtered_genes import import_filtered_genes

"""
- TODO
"""


def merge_arabidopsis_orthologs(master, arabidopsis_orthologs):
    # NOTE, the Arabidopsis orthologs were previously generated by Pat and only
    # exist for RR to H4.
    # Read in the Arabidopsis orthologs
    arabidopsis_orthologs = pd.read_csv(
        arabidopsis_orthologs,
        sep="\t",
        header=0,
        names=["H4_Gene", "Arabidopsis_Gene"],
    )

    return pd.merge(master, arabidopsis_orthologs, on="H4_Gene", how="left")


def DN_RR_merge_homologs_and_syntelogs(homologs, syntelogs):
    """
    Merge the homolog and syntelog dataframes
    """

    # Sort the syntelogs in alphabetical order by Royal Royce gene name
    syntelogs.sort_values(by=["RR_Gene"], inplace=True)

    # Are there any Royal Royce syntelogs that are not unique?
    # Yes indeed there are quite a lot...
    # print(syntelogs.loc[syntelogs.duplicated(subset=["RR_Gene"], keep=False)])

    # Let's merge the homologs and syntelogs
    # First I will rename the columns in the homolog file to make it easier to
    # merge
    homologs.rename(
        columns={
            "Del_Norte": "DN_Gene",
            "Royal_Royce": "RR_Gene",
            "E_Value": "BLAST_E_Value",
        },
        inplace=True,
    )
    # I will also rename the E_Value column in the syntelog file
    syntelogs.rename(columns={"E_Value": "Syntelog_E_Value"}, inplace=True)

    # Remove a gene from the homologs if it is in the syntelogs
    # TODO do I also need to do this with the RR genes?
    # Or do I need to do this pairwise with both genes being considered?
    # is this even the right command right here?
    # TODO Tuesday check out the blueberry code to se how I managed it
    # First write out rules for which genes are kept, RR genes must be unique,
    # but so must the DN genes...
    homologs = homologs[~homologs["DN_Gene"].isin(syntelogs["DN_Gene"])]

    print(homologs)
    print(syntelogs)
    raise ValueError

    # Now I will merge the two dataframes
    # merged_all = pd.concat([homologs, syntelogs], axis=0, join="outer")
    merged_all = pd.merge(
        homologs, syntelogs, on=["DN_Gene", "RR_Gene", "Point_of_Origin"], how="outer"
    )

    # Drop duplicates
    print(merged_all)
    merged_all.drop_duplicates(subset=["DN_Gene"], keep="first", inplace=True)
    print(merged_all)
    raise ValueError

    # Sort the merged dataframe by Royal Royce gene name and Point_of_Origin,
    # then by Evalues
    merged_all.sort_values(
        by=["RR_Gene", "Point_of_Origin", "Syntelog_E_Value", "BLAST_E_Value"],
        ascending=[True, False, True, True],
        inplace=True,
    )

    return merged_all


def H4_RR_merge_homologs_and_syntelogs(homologs, syntelogs):
    """
    Merge the homolog and syntelog dataframes
    """

    # Sort the syntelogs in alphabetical order by Royal Royce gene name
    syntelogs.sort_values(by=["RR_Gene"], inplace=True)

    # Are there any Royal Royce syntelogs that are not unique?
    # Yes indeed there are quite a lot...
    # print(syntelogs.loc[syntelogs.duplicated(subset=["RR_Gene"], keep=False)])

    # Let's merge the homologs and syntelogs
    # First I will rename the columns in the homolog file to make it easier to
    # merge
    homologs.rename(
        columns={
            "H4": "H4_Gene",
            "Royal_Royce": "RR_Gene",
            "E_Value": "BLAST_E_Value",
        },
        inplace=True,
    )
    # I will also rename the E_Value column in the syntelog file
    syntelogs.rename(columns={"E_Value": "Syntelog_E_Value"}, inplace=True)

    # Now I will merge the two dataframes
    merged_all = pd.concat([homologs, syntelogs], axis=0, join="outer")

    # Convert the H4 chromosome column to string
    merged_all["H4_Chromosome"] = merged_all["H4_Chromosome"].astype(str)

    # Sort the merged dataframe by Royal Royce gene name and Point_of_Origin,
    # then by Evalues
    merged_all.sort_values(
        by=["RR_Gene", "Point_of_Origin", "Syntelog_E_Value", "BLAST_E_Value"],
        ascending=[True, False, True, True],
        inplace=True,
    )

    return merged_all


def read_pan_orthology_table(pan_orthology_table_file):
    """
    Reads the output of this script to a Pandas dataframe
    """
    return pd.read_csv(
        pan_orthology_table_file,
        sep="\t",
        dtype={
            "H4_Chromosome": object,
            "RR_Chromosome": object,
            "DN_Chromosome": object,
        },
        header="infer",
    )


if __name__ == "__main__":

    path_main = os.path.abspath(__file__)
    dir_main = os.path.dirname(path_main)
    parser = argparse.ArgumentParser(description="TODO")

    parser.add_argument("H4_RR_cleaned_syntelog_input_file", type=str, help="TODO")
    parser.add_argument("H4_RR_cleaned_homolog_input_file", type=str, help="TODO")
    parser.add_argument("DN_RR_cleaned_syntelog_input_file", type=str, help="TODO")
    parser.add_argument("DN_RR_cleaned_homolog_input_file", type=str, help="TODO")
    parser.add_argument("H4_AT_ortholog_input_file", type=str, help="TODO")
    parser.add_argument("go_id_with_term_file", type=str, help="TODO")
    parser.add_argument(
        "DN_gene_data",
        type=str,
        help="gene data file that is the input to TE Density for DN",
    )

    parser.add_argument(
        "RR_gene_data",
        type=str,
        help="gene data file that is the input to TE Density for RR",
    )

    parser.add_argument(
        "H4_gene_data",
        type=str,
        help="gene data file that is the input to TE Density for H4",
    )
    parser.add_argument(
        "output_dir",
        type=str,
        help="Path and filename to output miscellaneous results",
    )
    parser.add_argument(
        "final_merged_output",
        type=str,
        help="Path and filename to output the master results",
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="set debugging level to DEBUG"
    )

    args = parser.parse_args()

    # Gene Data files for final sanity check
    args.RR_gene_data = os.path.abspath(args.RR_gene_data)
    args.DN_gene_data = os.path.abspath(args.DN_gene_data)
    args.H4_gene_data = os.path.abspath(args.H4_gene_data)

    # H4 files
    args.H4_RR_cleaned_syntelog_input_file = os.path.abspath(
        args.H4_RR_cleaned_syntelog_input_file
    )
    args.H4_RR_cleaned_homolog_input_file = os.path.abspath(
        args.H4_RR_cleaned_homolog_input_file
    )

    # DN files
    args.DN_RR_cleaned_syntelog_input_file = os.path.abspath(
        args.DN_RR_cleaned_syntelog_input_file
    )
    args.DN_RR_cleaned_homolog_input_file = os.path.abspath(
        args.DN_RR_cleaned_homolog_input_file
    )

    # Arabidopsis orthologs
    args.H4_AT_ortholog_input_file = os.path.abspath(args.H4_AT_ortholog_input_file)
    args.go_id_with_term_file = os.path.abspath(args.go_id_with_term_file)

    args.output_dir = os.path.abspath(args.output_dir)
    args.final_merged_output = os.path.abspath(args.final_merged_output)

    log_level = logging.DEBUG if args.verbose else logging.INFO
    logger = logging.getLogger(__name__)
    coloredlogs.install(level=log_level)
    # ------------------------------------------
    # Begin work, read in the data

    # Read in the cleaned gene annotations from the density work, and cut out
    # any genes in the ortholog table that are not in the annotations (i.e they
    # would not be in the TE Density output)
    # Sanity check, having to do this mostly because Pat's AT-H4 ortholog file
    # has some extra genes that were not in my regular gene annotation
    cleaned_RR_genes = import_filtered_genes(args.RR_gene_data, logger)
    cleaned_DN_genes = import_filtered_genes(args.DN_gene_data, logger)
    cleaned_H4_genes = import_filtered_genes(args.H4_gene_data, logger)

    H4_RR_syntelogs = read_cleaned_syntelogs(args.H4_RR_cleaned_syntelog_input_file)
    H4_RR_homologs = read_cleaned_homologs(args.H4_RR_cleaned_homolog_input_file)
    DN_RR_syntelogs = read_cleaned_syntelogs(args.DN_RR_cleaned_syntelog_input_file)
    DN_RR_homologs = read_cleaned_homologs(args.DN_RR_cleaned_homolog_input_file)

    # Remove a gene from the homologs if it is not in the cleaned gene
    # file
    # TODO put all of this in a function
    H4_RR_homologs = H4_RR_homologs[
        H4_RR_homologs["Royal_Royce"].isin(cleaned_RR_genes.index)
    ]
    H4_RR_homologs = H4_RR_homologs[H4_RR_homologs["H4"].isin(cleaned_H4_genes.index)]

    DN_RR_homologs = DN_RR_homologs[
        DN_RR_homologs["Royal_Royce"].isin(cleaned_RR_genes.index)
    ]
    DN_RR_homologs = DN_RR_homologs[
        DN_RR_homologs["Del_Norte"].isin(cleaned_DN_genes.index)
    ]

    # Remove a gene from the syntelogs if is not in the cleaned gene file
    # TODO put all of this in a function
    H4_RR_syntelogs = H4_RR_syntelogs[
        H4_RR_syntelogs["H4_Gene"].isin(cleaned_H4_genes.index)
    ]
    H4_RR_syntelogs = H4_RR_syntelogs[
        H4_RR_syntelogs["RR_Gene"].isin(cleaned_RR_genes.index)
    ]

    DN_RR_syntelogs = DN_RR_syntelogs[
        DN_RR_syntelogs["RR_Gene"].isin(cleaned_RR_genes.index)
    ]
    DN_RR_syntelogs = DN_RR_syntelogs[
        DN_RR_syntelogs["DN_Gene"].isin(cleaned_DN_genes.index)
    ]

    # Add the chromosome IDs to the homolog files
    # TODO put all of this in a function
    DN_RR_homologs["DN_Chromosome"] = DN_RR_homologs["Del_Norte"].map(
        cleaned_DN_genes["Chromosome"]
    )
    DN_RR_homologs["RR_Chromosome"] = DN_RR_homologs["Royal_Royce"].map(
        cleaned_RR_genes["Chromosome"]
    )

    H4_RR_homologs["H4_Chromosome"] = H4_RR_homologs["H4"].map(
        cleaned_H4_genes["Chromosome"]
    )
    H4_RR_homologs["RR_Chromosome"] = H4_RR_homologs["Royal_Royce"].map(
        cleaned_RR_genes["Chromosome"]
    )

    H4_RR_orthologs = H4_RR_merge_homologs_and_syntelogs(
        H4_RR_homologs, H4_RR_syntelogs
    )
    DN_RR_orthologs = DN_RR_merge_homologs_and_syntelogs(
        DN_RR_homologs, DN_RR_syntelogs
    )
    print(DN_RR_syntelogs)
    print(DN_RR_homologs)
    print(DN_RR_orthologs)
    raise ValueError

    output_file = os.path.abspath(os.path.join(args.output_dir, "DN_RR_orthologs.tsv"))
    logger.info(f"Writing DN-RR orthologs to {output_file}")
    DN_RR_orthologs.to_csv(output_file, sep="\t", index=False, header=True)

    output_file = os.path.abspath(os.path.join(args.output_dir, "H4_RR_orthologs.tsv"))
    logger.info(f"Writing H4-RR orthologs to {output_file}")
    H4_RR_orthologs.to_csv(output_file, sep="\t", index=False, header=True)

    # Ok at this point, both ortholog tables are in RAM. Now I need to merge
    # them as well.

    # Modify the H4 columns so when we merge it isn't as messy
    H4_RR_orthologs.rename(
        columns={
            "BLAST_E_Value": "H4_BLAST_E_Value",
            "Syntelog_E_Value": "H4_Syntelog_E_Value",
            "Point_of_Origin": "H4_Point_of_Origin",
        },
        inplace=True,
    )
    # Modify the DN columns so when we merge it isn't as messy
    DN_RR_orthologs.rename(
        columns={
            "BLAST_E_Value": "DN_BLAST_E_Value",
            "Syntelog_E_Value": "DN_Syntelog_E_Value",
            "Point_of_Origin": "DN_Point_of_Origin",
        },
        inplace=True,
    )
    # TODO I don't think I am merging these right
    # master = pd.concat([DN_RR_orthologs, H4_RR_orthologs], axis=0, join="outer")
    master = pd.merge(
        DN_RR_orthologs, H4_RR_orthologs, on=["RR_Gene", "RR_Chromosome"], how="outer"
    )

    # Reorder the columns
    master = master[
        [
            "DN_Gene",
            "RR_Gene",
            "H4_Gene",
            "DN_Chromosome",
            "RR_Chromosome",
            "H4_Chromosome",
            "DN_BLAST_E_Value",
            "DN_Syntelog_E_Value",
            "DN_Point_of_Origin",
            "H4_BLAST_E_Value",
            "H4_Syntelog_E_Value",
            "H4_Point_of_Origin",
        ]
    ]

    # Merge in H4 to Arabidopsis orthologs
    master = merge_arabidopsis_orthologs(master, args.H4_AT_ortholog_input_file)

    # Merge the GO terms
    go_terms = pd.read_csv(args.go_id_with_term_file, sep="\t", header="infer")
    # Transform the GO terms, I don't want repeating gene names due to multiple
    # go terms and descriptions
    go_terms = (
        go_terms.groupby("Arabidopsis_Gene")
        .agg({"GO_ID": lambda x: list(x), "GO_Term_Description": lambda x: list(x)})
        .reset_index()
    )
    master = pd.merge(master, go_terms, on="Arabidopsis_Gene", how="left")

    logger.info(f"Writing master ortholog table to {args.final_merged_output}")
    master.to_csv(args.final_merged_output, sep="\t", index=False, header=True)
